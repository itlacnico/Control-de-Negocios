 /**
     * @ORM\Column(type="string", length=25, unique=true)
     */
   # protected $username;

    /**
     * @ORM\Column(type="string", length=32)
     */
   # protected $salt;

    /**
     * @ORM\Column(type="string", length=40)
     */
   # protected $password;

    /**
     * @ORM\Column(type="string", length=60, unique=true)
     */
  #  protected $email;

    /**
     * @ORM\Column(name="is_active", type="boolean", nullable=true)
     */
   # protected $isActive;
#, cascade={"all"}, orphanRemoval=true
    /**
    * @ORM\ManyToMany(targetEntity="Role", inversedBy="users")
    *
    */
   # protected $roles;

    public function __construct()
    {
        parent::construct();
 #       $this->isActive = true;
 #       $this->salt = md5(uniqid(null, true));
 #       $this->roles = new ArrayCollection();
    }

 #   public function getRealRoles()
#    {
 #       return $this->roles;
 #        #return $this->roles ?: $this->roles = new ArrayCollection();
 #   }

  #  public function getRoles()
 #   {
 #       return $this->roles->toArray();
         #return $this->roles ?: $this->roles = new ArrayCollection();
 #   }

    /**
     * @inheritDoc
     */
 #   public function getUsername()
  #  {
  #      return $this->username;
  #  }

    /**
     * @inheritDoc
     */
 #   public function getSalt()
 #   {
 #       return $this->salt;
 #   }

    /**
     * @inheritDoc
     */
 #   public function getPassword()
 #   {
 #       return $this->password;
 #   }
#

    /**
     * @inheritDoc
     */
#    public function eraseCredentials()
#    {
 #   }

    /**
     * @see \Serializable::serialize()
     */
 #   public function serialize()
 #   {
 #       return serialize(array(
 #           $this->id,
 #       ));
 #   }

    /**
     * @see \Serializable::unserialize()
     */
#    public function unserialize($serialized)
#    {
#        list (
#            $this->id,
 #       ) = unserialize($serialized);
 #   }

  #  public function isAccountNonExpired()
  #  {
  #      return true;
  #  }

  #  public function isAccountNonLocked()
  #  {
  #      return true;
  #  }

 #   public function isCredentialsNonExpired()
 #   {
 #       return true;
 #   }

 #   public function isEnabled()
 #   {
 #       return $this->isActive;
 #   }

    /**
     * Get id
     *
     * @return integer 
     */
 #   public function getId()
 #   {
  #      return $this->id;
  #  }

    /**
     * Set username
     *
     * @param string $username
     * @return User
     */
#    public function setUsername($username)
#    {
#        $this->username = $username;
    
#        return $this;
#    }

    /**
     * Set salt
     *
     * @param string $salt
     * @return User
     */
 #   public function setSalt($salt)
#    {
#        $this->salt = $salt;
#        return $this;
#    }

    /**
     * Set password
     *
     * @param string $password
     * @return User
     */
#    public function setPassword($password)
#    {
#
#        $this->password = $password;
#    
#        return $this;
#    }
#
    /**
     * Set email
     *
     * @param string $email
     * @return User
     */
 #   public function setEmail($email)
 #   {
 #       $this->email = $email;
 #   
 #       return $this;
 #   }

    /**
     * Get email
     *
     * @return string 
     */
  #  public function getEmail()
  #  {
  #      return $this->email;
  #  }

    /**
     * Set isActive
     *
     * @param boolean $isActive
     * @return User
     */
#    public function setIsActive($isActive)
#    {
#        $this->isActive = $isActive;
#    
#        return $this;
  #  }
#
    /**
     * Get isActive
     *
     * @return boolean 
     */
#    public function getIsActive()
#    {
#        return $this->isActive;
#    }

    /**
     * Add roles
     *
     * @param \Timsa\ControlFletesBundle\Entity\Role $roles
     * @return User
     */
#    public function addRole(\Timsa\ControlFletesBundle\Entity\Role $roles)
 #   {
 #       $this->roles[] = $roles;
    
#        return $this;
 #   }

    /**
     * Remove roles
     *
     * @param \Timsa\ControlFletesBundle\Entity\Role $roles
     * @return User
     */
 #   public function removeRole(\Timsa\ControlFletesBundle\Entity\Role $roles)
 #   {
 #       $this->roles->removeElement($roles);
  #  }
#
}